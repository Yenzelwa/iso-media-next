// app/layout.test.tsx
import React from "react";
import { render, screen } from "@testing-library/react";
import RootLayout, { metadata } from "@/src/app/login/layout";

// Mock AuthProvider to isolate layout behavior
jest.mock("@/src/app/context/authContext", () => ({
  AuthProvider: ({ children }: { children: React.ReactNode }) => (
    <div data-testid="auth-provider">{children}</div>
  ),
}));

describe("RootLayout", () => {
  it("exports the expected metadata", () => {
    expect(metadata).toMatchObject({
      title: "Next.js",
      description: "Generated by Next.js",
    });
  });

  it("renders html with lang='en', wraps children with AuthProvider, and shows children", () => {
    const { container } = render(
      <RootLayout>
        <div>Hello child</div>
      </RootLayout>
    );

    // Ensure <html lang="en"> is present
    const htmlEl = container.querySelector("html");
    expect(htmlEl).not.toBeNull();
    expect(htmlEl?.getAttribute("lang")).toBe("en");

    // Ensure children are wrapped by AuthProvider (mocked)
    expect(screen.getByTestId("auth-provider")).toBeInTheDocument();
    expect(screen.getByText("Hello child")).toBeInTheDocument();

    // Optional: ensure body exists (since layout returns <body> too)
    expect(container.querySelector("body")).not.toBeNull();
  });
});
